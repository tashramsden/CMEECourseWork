Starting code feedback for Tash, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 2.63 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week3, week2, Feedback, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

sandbox/
# some week2 code files take inputs/output to sandbox
!week2/sandbox/

results/*
!results/.gitkeep

#python
__pycache__/
.pytest_cache
*.pyc

#R
.RData
.Rhistory
.Rapp.history
.Ruserdata
.Renviron

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

**Coursework completed as part of MSc in Computational Methods in Ecology and Evolution at Silwood Park Imperial College London; see course guidebook [TheMulQuaBio](https://mhasoba.github.io/TheMulQuaBio/intro.html).**

## Directories

* [**week1**](week1)
  * Topics covered: [UNIX and Linux](https://mhasoba.github.io/TheMulQuaBio/notebooks/01-Unix.html), [Shell scripting](https://mhasoba.github.io/TheMulQuaBio/notebooks/02-ShellScripting.html), [LaTeX for scientific documents](https://mhasoba.github.io/TheMulQuaBio/notebooks/04-LaTeX.html), and [version control with Git](https://mhasoba.github.io/TheMulQuaBio/notebooks/03-Git.html).

* [**week2**](week2)
  * Topics covered: [Biological Computing in Python I](https://mhasoba.github.io/TheMulQuaBio/notebooks/05-Python_I.html#) (variables, loops, comprehensions, functions, scope, writing programs, unit testing and debugging)

## Author

Tash Ramsden | tash.ramsden21@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week 2

**Topics covered this week:** [Biological Computing in Python I](https://mhasoba.github.io/TheMulQuaBio/notebooks/05-Python_I.html#) (variables, loops, comprehensions, functions, scope, writing programs, unit testing and debugging)

Languages: Python3

Project structure: 22 python script files in code directory, some of which will manipulate files from data directory. Data directory contains 3 files; more will be generated by running the code files as below. Results directory will also be populated by running code files as described below. The sandbox directory contains a few test script files as well as test.txt which is used by basic_io1.py; basic_io3.py outputs to sandbox (described below).

## Code Files:

* [**loops.py**](code/loops.py)
  * Script file exploring python for and while loops (careful: an infinite loop is generated! Escape using ctrl+c).

* [**MyExampleScript.py**](code/MyExampleScript.py)
  * A simple script containing one function to calculate the square of a number.

* [**cfexercises1.py**](code/cfexercises1.py)
  * A modular program containing functions which perform various basic mathematical manipulations, e.g. calculating a factorial.

* [**cfexercises2.py**](code/cfexercises2.py)
  * Some examples of loops and conditionals in functions; hello!

* [**oaks.py**](code/oaks.py)
  * Exploring loops and comprehensions whilst determining whether trees are oaks.

* [**scope.py**](code/scope.py)
  * A script split into 5 sections which explore variable scope, and global and local variables.

* [**basic_io1.py**](code/basic_io1.py)
  * Script that opens test.txt in ../sandbox and prints the lines; first as they appear and then with blank lines removed.

* [**basic_io2.py**](code/basic_io2.py)
  * Writes file called testout.txt into ../sandbox which contains the numbers 0 to 99.

* [**basic_io3.py**](code/basic_io3.py)
  * Writes the binary file testp.p to ../sandbox containing the contents of a dictionary, then reads this binary file and prints its contents.

* [**basic_csv.py**](code/basic_csv.py)
  * Reads testcsv.csv from the data directory which contains information about several species; prints this information; and writes a new csv file, bodymass.csv, to ../data containing only species name and body mass.

* [**boilerplate.py**](code/boilerplate.py)
  * Template python program.

* [**using_name.py**](code/using_name.py)
  * Exploring the special __ name __ variable: in the ipython3 console try running the script using %run using_name.py, and try import using_name.

* [**sysargv.py**](code/sysargv.py)
  * Script exploring sys.argv: try running the script with different arguments.

* [**control_flow.py**](code/control_flow.py)
  * Modular script to demonstrate control flows; contains various functions which perform mathematical calculations.

* [**test_control_flow.py**](code/test_control_flow.py)
  * Contains function for determining whether a number is even or odd; unit testing has been implemented using `doctest`.

* [**debugme.py**](code/debugme.py)
  * Script which originally produced `ZeroDivisionError`; explore `ipdb.set_trace()` for debugging; implement exceptions to catch errors.

* [**lc1.py**](code/lc1.py)
  * Using loops and list comprehensions to extract information about birds from tuples to create lists.

* [**lc2.py**](code/lc2.py)
  * Using loops and list comprehensions to create lists of tuples containing monthly rainfall data.

* [**dictionary.py**](code/dictionary.py)
  * Short script which populates a dictionary from a list of tuples so that order names are associated with sets of taxa.

* [**tuple.py**](code/tuple.py)
  * Using list comprehension on a tuple of tuples to print information about bird species.

* [**align_seqs.py**](code/align_seqs.py)
  * A program which reads 2 nucleotide sequences from sequences.csv in the data directory and iterates through the possible alignments to calculate the alignments with the highest number of matching bases. The last alignment with the highest matching score is then printed and saved to a text file, sequence_alignment.txt, in the results directory.

* [**oaks_debugme.py**](code/oaks_debugme.py)
  * A script that reads the csv file, TestOaksData.csv, from the data directory and determines whether the tree species are oaks or not. Oak species are then written to a new csv, JustOaksData.csv, in the data directory.

## Author

Tash Ramsden | tash.ramsden21@imperial.ac.uk

**********************************************************************

Found following files in results directory: sequence_alignment.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 22 code files: scope.py, debugme.py, lc2.py, control_flow.py, loops.py, basic_io3.py, cfexercises1.py, oaks.py, align_seqs.py, using_name.py, dictionary.py, test_control_flow.py, sysargv.py, tuple.py, cfexercises2.py, basic_io1.py, basic_io2.py, boilerplate.py, MyExampleScript.py, lc1.py, basic_csv.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Testing variable scope - uncomment a section at a time to explore scope with global and local variables"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

#####################################################

## 1.
# _a_global = 10  # a global variable

# if _a_global >= 5:
#     _b_global = _a_global + 5  # also a global variable

# print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
# print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function1():
    """A function to demonstrate that if global variables are altered within a function, they will remain as they were outside of the function.
    
    This section also demonstrates that local variables are not available outside of the scope of the function they are created in."""
    _a_global = 4 # a local variable

    if _a_global >= 4:
        _b_global = _a_global + 5 # also a local variable

    _a_local = 3

    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _b_global is ", _b_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

# a_function1()

# print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
# print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)

# print("After calling a_function, outside the function, the value of _a_local is ", _a_local)


#####################################################


## 2.
# _a_global = 10

def a_function2():
    """A function to demonstrate that global variables are available within functions."""
    _a_local = 4
    
    print("Inside the function, the value _a_local is ", _a_local)
    print("Inside the function, the value of _a_global is ", _a_global)
    
    return None

# a_function2()

# print("Outside the function, the value of _a_global is", _a_global)


#####################################################


## 3.
# _a_global = 10

# print("Before calling a_function, outside the function, the value of _a_global is", _a_global)

def a_function3():
    """A function to demonstrate the use of the global keyword: when used, global variables can be altered from within a function."""
    global _a_global
    _a_global = 5
    _a_local = 4
    
    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value _a_local is ", _a_local)
    
    return None

# a_function3()

# print("After calling a_function, outside the function, the value of _a_global now is", _a_global)


#####################################################


## 4.
def a_function4():
    """A function to explore scope with nested functions: a local variable is created here - will be made global by the nested function within. The global keyword will alter local variables globally (and make them available globally) but not within the scope of another function."""
    _a_global = 10

    def _a_function4_2():
        """Makes the local variable _a_global a global variable, and changes its value globally."""
        global _a_global
        _a_global = 20
    
    print("Before calling a_function4_2, value of _a_global is ", _a_global)

    _a_function4_2()
    
    print("After calling _a_function4_2, value of _a_global is ", _a_global)
    
    return None

# a_function4()

# print("The value of a_global in main workspace / namespace is ", _a_global)


#####################################################


## 5.
# _a_global = 10

def a_function5():
    """Nested function demonstrating scope and the global keyword. If a variable is defined globally, when altered using the global keyword it's value will be altered everywhere."""

    def _a_function5_2():
        """Alters a global variable using the global keyword."""
        global _a_global
        _a_global = 20
    
    print("Before calling a_function5_2, value of _a_global is ", _a_global)

    _a_function5_2()
    
    print("After calling _a_function5_2, value of _a_global is ", _a_global)

# a_function5()

# print("The value of a_global in main workspace / namespace is ", _a_global)

**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07447s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script for testing debugging: originally produced ZeroDivisionError; explored ipdb.set_trace() for debugging; implemented exceptions to catch errors"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

def buggyfunc(x):
    """Takes a number, x, iterates from this down to 0, divides original input by this reduced number"""
    y = x
    for i in range(x):
        try: 
            y = y - 1
            z = x / y
        # import ipdb; ipdb.set_trace()
        # import pdb; pdb.set_trace()
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}; y = {y}, z = {z};")
    return z

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.07366s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Creates lists of tuples containing monthly rainfall data from tuples using loops and list comprehensions"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
print("\nStep #1")
more_rain = [(month, rain) for (month, rain) in rainfall if rain > 100]
print(f"Months and rainfall values when the amount of rain was greater than 100mm:\n{more_rain}")

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

print("\nStep #2")
less_rain = [(month, rain) for (month, rain) in rainfall if rain < 50]
print(f"Months and rainfall values when the amount of rain was less than 50mm:\n{less_rain}")

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

print("\nStep #3: Using normal loops")

more_rain2 = []
less_rain2 = []

for record in rainfall:
    if record[1] > 100:
        more_rain2.append(record)
    elif record[1] < 50:
        less_rain2.append(record)

print(f"Months and rainfall values when the amount of rain was greater than 100mm:\n{more_rain2}")

print(f"Months and rainfall values when the amount of rain was less than 50mm:\n{less_rain2}")

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

Step #1
Months and rainfall values when the amount of rain was greater than 100mm:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]

Step #2
Months and rainfall values when the amount of rain was less than 50mm:
[('MAR', 49.9), ('SEP', 27.0)]

Step #3: Using normal loops
Months and rainfall values when the amount of rain was greater than 100mm:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months and rainfall values when the amou
**********************************************************************

Code ran without errors

Time consumed = 0.09834s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements."""
# docstrings are considered part of the runnning code (normal comments are stripped)
# Hence, can access docstrings at run time
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0):
    """Find whether a number x is even or odd."""
    if x % 2 == 0:
        return "%d is even!" % x
    return "%d is odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else:
        return "No divisor found for %d!" % x
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x."""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    """Main entry point of the program"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv) 
    sys.exit(status) 

# is_prime(53)

# formatting outputs for printing - baisc formatting types:
#%d, %s, %f, %e for decimals, strings, floats, and floats w scientific notation
#eg. print("%d %s %f %e" % (20, "30", 0.0003, 0.0003))

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is even!
33 is odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07528s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Exploring FOR loops in Python - watch out for the infinite loop! (commented out for safety)"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

# remember indexing from 0 - so this prints 0:4
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in Python

z = 0
while z < 100:
    z = z + 1
    print(z)

# b = True
# while b:
#     print("GERONIMO! infinite loop! ctrl+c to stop!")

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.07592s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Storing objects. Writes a binary file, testp.p, to ../sandbox containing the contents of a dictionary, then reads this binary file and prints its contents"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another_key": 11}

import pickle

# b here means accept binary files
f = open("../sandbox/testp.p", "wb")
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open("../sandbox/testp.p", "rb")
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another_key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.07871s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some input/output functions."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys

## functions ##
def foo_1(x=9):
    """Finds square root of a number, x"""
    return f"\nThe square root of {x} is {x ** 0.5}"

def foo_2(x=5, y=1.2):
    """Return the largest of two numbers"""
    if x > y:
        return f"\nThe bigger number of {x} and {y} is: {x}"
    return f"\nThe bigger number of {x} and {y} is: {y}"

# moves the biggest number to the last position (if re-run w output would sort all into ascending order)
def foo_3(x=8, y=9, z=3):
    """Moves the largest of 3 numbers to the last position"""
    if x > y:
        # swaps positions depending on relative size
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return f"\nReordered list: {[x, y, z]}"

def foo_4(x=3):
    "Returns the factorial of a number, x"
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return f"\nThe factorial of {x} is {result}"

def foo_5(x=3):
    """Returns the factorial of a number, x, using a recursive method"""
    if x == 1:
        print("\nThe factorial is:")
        return 1
    return x * foo_5(x - 1)

def foo_6(x=3):
    """Returns the factorial of a number, x"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return f"\nThe factorial is: {facto}"

def main(argv):
    """Main entry point of the program"""
    print(foo_1(16))
    print(foo_2(3.4, 3.5))
    print(foo_2(100, -3))
    print(foo_3(8, 5, 4))
    print(foo_4(20))
    print(foo_4(5))
    print(foo_5(5))
    print(foo_6(5))
    return 0

if __name__ == "__main__":
    status = main(sys.argv) 
    sys.exit(status) 

**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

The square root of 16 is 4.0

The bigger number of 3.4 and 3.5 is: 3.5

The bigger number of 100 and -3 is: 100

Reordered list: [5, 4, 8]

The factorial of 20 is 2432902008176640000

The factorial of 5 is 120

The factorial is:
120

The factorial is: 120

**********************************************************************

Code ran without errors

Time consumed = 0.07566s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Exploring loops and comprehensions whilst finding just those taxa that are oak trees from a list of species"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    """Returns True if name starts with 'quercus '"""
    return name.lower().startswith("quercus ")

## Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

## Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.07584s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Reads nucleotide sequences from ../data/sequences.csv; 
calculates alignments with highest number of matching bases; 
saves last alignment with highest score to ../results/sequence_alignment.txt"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import csv
import sys


csv_file = "../data/sequences.csv"


## functions ##
def get_sequences_lengths(seq_csv):
    """Takes a csv file and extracts the sequences, gets the lengths of these sequences:
    assigns longer sequence s1 with length l1, shorter sequence s2 with length l2.
    Returns s1, s2, l1, l2."""
    # read in csv file containing 2 sequences
    with open(seq_csv, "r") as seq_file:
        csvread = csv.reader(seq_file)
        seqs = [seq for seq in csvread]
    
    # print(seqs)
    seq1 = seqs[0][0]
    seq2 = seqs[0][1]
    
    # Assign the longer sequence s1, and the shorter to s2
    # l1 is length of the longest, l2 that of the shortest
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    return s1, s2, l1, l2


def calculate_score(s1, s2, l1, l2, startpoint):
    """A function that computes a score by returning the number of matches starting from arbitrary startpoint (chosen by user)"""
    # import ipdb; ipdb.set_trace()
    matched = "" # to hold string displaying alignments
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score


def find_best_alignment(s1, s2, l1, l2):
    """Finds the best alignment of 2 sequences, s1 and s2, by iteratively comparing their "matching" scores;
    returns the last best alignment and its score."""
    my_best_align = None
    my_best_score = -1
    
    for i in range(l1): # Note that you just take the first/last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z >= my_best_score:  # if this >= then would get last matching alignment (> for first)
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    # print(my_best_align)
    # print(s1)
    # print("Best score:", my_best_score)

    return my_best_align, my_best_score


def save_best_align(my_best_align, my_best_score, s1):
    """Takes the best alignment, its score, and the longer sequence; 
    saves this information to a text file in ../results."""
    output_contents = f"Aligned sequences:\n\n{my_best_align}\n{s1}\n\nBest score: {my_best_score}"
    print(output_contents)
    
    with open("../results/sequence_alignment.txt", "w") as output:
        print("Saving best alignment to ../results/sequence_alignment.txt...")
        output.write(output_contents)
        print("Done!")


def main(argv):
    """Main entry point of the program."""
    s1, s2, l1, l2 = get_sequences_lengths(csv_file)
    my_best_align, my_best_score = find_best_alignment(s1, s2, l1, l2)
    save_best_align(my_best_align, my_best_score, s1)
    return 0


if __name__ == "__main__":
    status = main(sys.argv) 
    sys.exit(status) 

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.07855s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

"""Exploring the special __name__ variable: in the ipython3 console try running the script using %run using_name.py, and try import using_name."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

if __name__ == "__main__":
    print("This program is being run by itself")
else:
    print("I am being imported from another module")

print("This module's name is: " + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.07828s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Creates a dictionary of orders mapped to sets of taxa."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

## First attempt:
## create empty dict with key names
# taxa_dict = {entry[1]: set() for entry in taxa}

## populate dict w values
# for entry in taxa:
#     taxa_dict[entry[1]].add(entry[0])

# print(taxa_dict)

# ONE LINE
taxa_dict2 = {entry[1]: set(row[0] for row in taxa if row[1] == entry[1]) for entry in taxa}

print(taxa_dict2)

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus', 'Mus domesticus', 'Gerbillus henleyi', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Arctocephalus gazella', 'Canis lupus', 'Lyacon pictus'}}

**********************************************************************

Code ran without errors

Time consumed = 0.07370s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Contains a function with unit testing. Try: run test_control_flow.py -v to see unit testing."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
    
    >>> even_or_odd(10)
    '10 is even!'

    >>> even_or_odd(5)
    '5 is odd!'

    whenever a float is provided, the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is odd!'

    in case of negative numbers, the posiitve is taken:
    >>> even_or_odd(-2)
    '-2 is even!'

    """
    # define function to be tested
    if x % 2 == 0:
        return "%d is even!" % x
    return "%d is odd!" % x

def main(argv):
    """Main entry point of the program"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if __name__ == "__main__":
    status = main(sys.argv) 

doctest.testmod()  # to run with embedded tests - run test_control_flow.py -v

**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
22 is even!
33 is odd!

**********************************************************************

Code ran without errors

Time consumed = 0.11652s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script exploring sys.argv: try running the script with different numbers of arguments, e.g. run sysargv.py 1 2 var3"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.07640s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Prints lists of information about bird species (latin names, common names, and body masses)"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

## loop
# for bird in birds:
#     print(f"\nLatin name: {bird[0]}\nCommon name: {bird[1]}\nMass: {bird[2]}")

## lc
bird_info = [print(f"\nLatin name: {bird[0]}\nCommon name: {bird[1]}\nMass: {bird[2]}") for bird in birds]

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

Latin name: Passerculus sandwichensis
Common name: Savannah sparrow
Mass: 18.7

Latin name: Delichon urbica
Common name: House martin
Mass: 19

Latin name: Junco phaeonotus
Common name: Yellow-eyed junco
Mass: 19.5

Latin name: Junco hyemalis
Common name: Dark-eyed junco
Mass: 19.6

Latin name: Tachycineata bicolor
Common name: Tree swallow
Mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.07577s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some examples of loops and conditionals in functions"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

###############################

def hello_1(x=10):
    """Takes a number, x, prints hello for numbers up to x which are divisible by 3"""
    for j in range(x):
        if j % 3 == 0:
            print("hello")
    print(" ")

###############################

def hello_2(x=15):
    """Takes a number, x, prints hello for numbers up to x if the number leaves a remainder of 3 when divided by 5 or 4"""
    for j in range(x):
        # print(j)
        if j % 5 == 3:
            print("hello")
        elif j % 4 == 3:
            print("hello")
    print(" ")

################################

def hello_3(x=10, y=3):
    """Takes 2 numbers, x and y, prints hello n times, where n = y - x"""
    for i in range(x, y):
        print("hello")
    print(" ")

################################

def hello_4(x=2):
    """Takes a number, x, prints hello for every 3 numbers between x and 15"""
    while x != 15:
        print("hello")
        x = x + 3
    print(" ")

################################

def hello_5(x=16):
    """Takes a number, x, increases x by 1 up to 99 and prints hello when this number equals 18, and prints hello 7 times when it equals 31"""
    while x < 100:
        if x == 31:
            for k in range(7):
                print("hello")
        elif x == 18:
            print("hello")
        x = x + 1
    print(" ")

################################

# WHILE loop with BREAK
def hello_6(x=True, y=3):
    """Takes 2 arguments: x and y. If x is True, increases the number, y, by 1 and prints hello {number} until the number reaches 6 and the function exits"""
    while x: 
        print("hello! " + str(y))
        y += 1
        if y == 6:
            break
    print(" ")

################################

def main(argv):
    """Main entry point of the program"""
    hello_1(12)
    hello_2(12)
    hello_3(3, 17)
    hello_4(0)
    hello_5(12)
    hello_6(True, 0)
    return 0

if __name__ == "__main__":
    status = main(sys.argv) 
    sys.exit(status) 

**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********************************************************************

Code ran without errors

Time consumed = 0.07886s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""File inputs. Opens test.txt in ../sandbox and prints the lines; first as they appear and then with blank lines removed"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'


# # Open a file for reading
# f = open("../sandbox/test.txt", "r")
# # use "implicit" for loop:
# # if object is a file, python will cycle over lines
# for line in f:
#     print(line)

# f.close()

# # Same example, skip blank lines
# f = open("../sandbox/test.txt", "r")
# for line in f:
#     if len(line.strip()) > 0:
#         print(line)

# f.close()

#############################

## The same but using with open
## (don't have to remember to close file afterwards)

# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.08020s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""File output. Creates a file, testout.txt, in ../sandbox containing numbers from 0 to 99"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

# Save the elements of a list to a file
list_to_save = range(100)

f = open("../sandbox/testout.txt", "w")
for i in list_to_save:
    f.write(str(i) + "\n")

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07640s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines."""
# can access docstrings at run time, try import boilerplate, then help(boilerplate)

__appname__ = '[application name here]'
__author__ = 'your name (your@email.address)'
__version__ = '0.0.1'
__license__ = 'License for this code/program'

## imports ##
import sys  # module to interface the program w the operating system

## constants ##


## functions ##
def main(argv):
    """Main entry point of the program"""
    print("This is a boilerplate")
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)  # calls main, passes args, status will be 0 if main runs successfully
    sys.exit(status)  # terminates program, w status code
    # sys.exit("I am exiting right now!")

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.07406s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""A simple script with a function to calculate the square of a number"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

def foo(x):
    """Returns the square of a number, x"""
    x *= x  # same as x = x*x
    print(x)

foo(2)

**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.07599s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Creates lists of bird information (latin names, common names, and body masses) from tuples using loops and list comprehensions"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

print("\nUsing list comprehension:\n")

latin_names = [bird[0] for bird in birds]
common_names = [bird[1] for bird in birds]
body_masses = [bird[2] for bird in birds]

print(f"Latin names:\n{latin_names}")
print(f"Common names:\n{common_names}")
print(f"Mean body masses:\n{body_masses}")

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

print("\n\nUsing normal loops:\n")

latin_names2 = []
common_names2 = []
body_masses2 = []

for bird in birds:
    latin_names2.append(bird[0])
    common_names2.append(bird[1])
    body_masses2.append(bird[2])

print(f"Latin names:\n{latin_names2}")
print(f"Common names:\n{common_names2}")
print(f"Mean body masses:\n{body_masses2}")

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.

 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

Using list comprehension:

Latin names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean body masses:
[18.7, 19, 19.5, 19.6, 20.2]


Using normal loops:

Latin names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
['Savannah sparrow', 'House martin
**********************************************************************

Code ran without errors

Time consumed = 0.07686s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Reads testcsv.csv from ../data; prints species information and writes new file, bodymass.csv, to ../data with species and bodymass info"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open("../data/testcsv.csv", "r") as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and body mass
with open("../data/testcsv.csv", "r") as f:
    with open("../data/bodymass.csv", "w") as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            # print(row[0])
            # print(row[4])
            csvwrite.writerow([row[0], row[4]])

**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasca
**********************************************************************

Code ran without errors

Time consumed = 0.07940s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Reads ../data/TestOaksData.csv; determines whether the tree species are oaks or not. 
Oak species written to a new csv, ../data/JustOaksData.csv"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name is 'quercus' 
    
    >>> is_an_oak('Fagus')
    False

    >>> is_an_oak('Quercus')
    True

    >>> is_an_oak('Quercuss')
    False

    """
    return name.lower() == 'quercus'

def main(argv): 
    """Reads ../data/TestOaksData, writes only oak information to ../data/TestOaksData.csv"""
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()

**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.11703s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!