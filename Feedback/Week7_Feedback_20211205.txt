Starting code feedback for Tash, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 128.48 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week5, week6, week4, week1, week2, week7, .git, MiniProject, week3, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

results/*
sandbox/
course_material/

!.gitkeep
# some week2 code files take test.txt as input
!week2/sandbox/test.txt

#python
__pycache__/
.pytest_cache
*.pyc
profires

#R
.RData
.Rhistory
.Rapp.history
.Ruserdata
.Renviron
Rplots.pdf

.ipynb_checkpoints/

# miniproject
growth_plots/*
!.gitkeep
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

**Coursework completed as part of MSc in Computational Methods in Ecology and Evolution at Silwood Park Imperial College London; see course guidebook [TheMulQuaBio](https://mhasoba.github.io/TheMulQuaBio/intro.html).**

## Directories

* [**week1**](week1)
  * Topics covered: [UNIX and Linux](https://mhasoba.github.io/TheMulQuaBio/notebooks/01-Unix.html), [Shell scripting](https://mhasoba.github.io/TheMulQuaBio/notebooks/02-ShellScripting.html), [LaTeX for scientific documents](https://mhasoba.github.io/TheMulQuaBio/notebooks/04-LaTeX.html), and [version control with Git](https://mhasoba.github.io/TheMulQuaBio/notebooks/03-Git.html).

* [**week2**](week2)
  * Topics covered: [Biological Computing in Python I](https://mhasoba.github.io/TheMulQuaBio/notebooks/05-Python_I.html#) (variables, loops, comprehensions, functions, scope, writing programs, unit testing and debugging).

* [**week3**](week3)
  * Topics covered: [Biological Computing in R](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#) (variables, creating and manipulating data, importing and exporting data, functions, vectorization, errors and debugging). [Data Management and Visualization](https://mhasoba.github.io/TheMulQuaBio/notebooks/08-Data_R.html) (data wrangling, data visualization, tidyverse and ggplot).

* [**week4**](week4)
  * Topics covered: Statistics in R, mostly using data on sparrows - "Stats with Sparrows"!

* [**week5**](week5)
  * Topics covered: [Geographic Information Systems (GIS) and Spatial Methods using R](https://davidorme.github.io/Masters_GIS/intro.html) (core GIS concepts, species distribution modelling, spatial modelling).

* [**week6**](week6)
  * Topics covered: Genomics and Bioinformatics in R (allele and genotype frequencies; genetic drift, mutation and divergence; coalescence theory; population subdivision and demography).

* [**week7**](week7)
  * Topics covered: [Biological Computing in Python II](https://mhasoba.github.io/TheMulQuaBio/notebooks/06-Python_II.html#) (numpy, scipy, arrays, matrices, profiling, vectorization); [Introduction to Jupyter](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-JupyIntro.html); and [Data Analyses with Python and Jupyter](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-Data-Python.html).

* [**MiniProject**](MiniProject)
  * About: A fully reproducible computing project aiming to determine a best fitting model for a large dataset of bacterial growth curves, as per 
[The Computing Miniproject](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-MiniProj.html#) guidelines.


## Author

Tash Ramsden | tash.ramsden21@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: week1, week2, week3, week4, week5, week6, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week 7

**Topics covered this week:** [Biological Computing in Python II](https://mhasoba.github.io/TheMulQuaBio/notebooks/06-Python_II.html#) (numpy, scipy, arrays, matrices, profiling, vectorization); [Introduction to Jupyter](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-JupyIntro.html); and [Data Analyses with Python and Jupyter](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-Data-Python.html).

Languages: Python3 (version 3.10.0), R (version 4.1.2), Jupyter notebook (version 6.4.6)

Project strcuture: 6 python script files, an R script and a Jupyter notebook in the code directory; the results directory will be populated by running these. Data files in the data directory.


## Code Files:

* [**LV1.py**](code/LV1.py)
  * Runs a Lotka-Volterra model and produces two plots of consumer-resource density:
  `LV_model.pdf` and `LV_model2.pdf` showing densities over time and plotted against eachother respectively.

* [**profileme.py**](code/profileme.py)
  * A script for exploring profiling; try running `run -p profileme.py` from ipython3.

* [**profileme2.py**](code/profileme2.py)
  * Another python script to compare to the first `profileme.py`.

* [**timeitme.py**](code/timeitme.py)
  * Imports some functions from the profileme scripts; for exploring profiling using the timeit and time modules. 

* [**oaks_debugme.py**](code/oaks_debugme.py)
  * A script that reads the csv file, `TestOaksData.csv`, from the data directory and determines whether tree species are oaks or not. Oak species are then written to a new csv, `JustOaksData.csv`, in the data directory.

* [**TestR.R**](code/TestR.R)
  * An R script that prints "Hello, this is R!".

* [**TestR.py**](code/TestR.py)
  * Using python subprocess to run `TestR.R` and save the outputs and any errors to files in the results directory.

* [**MyFirstJupyterNb.ipynb**](code/MyFirstJupyterNb.ipynb)
  * A simple Jupyter notebook with some data exploration using `pandas`, `matplotlib` and `scipy`.


## Author

Tash Ramsden | tash.ramsden21@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 8 code files: TestR.py, profileme.py, oaks_debugme.py, MyFirstJupyterNb.ipynb, profileme2.py, TestR.R, LV1.py, timeitme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Workflow with subprocess: this script will run TestR.R and save the output and any bash messages/errors to the results directory."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'


import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()
# verbose flag means that all bash/R outputs will be saved to the err file

**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08888s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Profiling code"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'


# profiling = locate sections of code where speed bottlenecks exist
# in general: run -p function/script_name

def my_squares(iters):
    """Takes a number, returns the squares of the numbers up to this number in a list."""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """Takes a number, iters, and a string; returns a new string which contains the orginal string repeated iters times, each spearated by a comma and space."""
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """Takes a number and string; passes these to my_squares() and my_join().
    When finished, returns 0"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")

# here, my_join() taking up lots of run time (calling join() LOTS)

**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.27545s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Reads ../data/TestOaksData.csv; determines whether the tree species are oaks or not. 
Oak species written to a new csv, ../data/JustOaksData.csv"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name is 'quercus' 
    
    >>> is_an_oak('Fagus')
    False

    >>> is_an_oak('Quercus')
    True

    >>> is_an_oak('Quercuss')
    False

    >>> is_an_oak('Querc')
    False

    >>> is_an_oak('Quercusalba')
    False

    """
    return name.lower() == 'quercus'

def main(argv): 
    """Reads ../data/TestOaksData, writes only oak information to ../data/TestOaksData.csv"""
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()

**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.05184s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "19702c7b",
   "metadata": {},
   "source": [
    "$$\n",
    "    \\frac{dN}{dt} = rN \\left( 1-\\frac{N}{K}\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb00b5de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aa77ddd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)  # switch kernel to R to run this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4f6b9b8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_134331/3619581177.py:5: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
      "/tmp/ipykernel_134331/3619581177.py:5: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# python kernel\n",
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f663ba0c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEsCAMAAADn+3SWAAAC+lBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dJSUlKSkpLS0tMTExN\nTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1eXl5f\nX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29wcHBx\ncXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKD\ng4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OUlJSV\nlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqan\np6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrK0tLS1tbW2tra3t7e4uLi5ubm6\nurq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrLy8vM\nzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e\n3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w\n8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7///8yS3CPAAAA\nCXBIWXMAABJ0AAASdAHeZh94AAAV1UlEQVR4nO2de3wU1dnHn01CLhgUUUAEgvoiF+1bLWkV\ni6KoaIXkFQGpGBFUFFAURMQLFbFSLRUFWqkivgi+1RaMaBWlgApoBCHhHoGIJEDI5QAh98te\n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\nqo4IAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# R kernel\n",
    "require(ggplot2)\n",
    "library(repr)# to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da2597c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.3.4'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# back to python kernel\n",
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1de0b06",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16bab6a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pd?\n",
    "\n",
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2132a154",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Daubentonia_madagascariensis</td>\n",
       "      <td>Chiromyiformes</td>\n",
       "      <td>Daubentoniidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allocebus_trichotis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avahi_laniger</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>1.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avahi_occidentalis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cheirogaleus_adipicaudatus</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cheirogaleus_crossleyi</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cheirogaleus_major</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheirogaleus_medius</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Species       Infraorder          Family Distribution  \\\n",
       "0  Daubentonia_madagascariensis  Chiromyiformes   Daubentoniidae   Madagascar   \n",
       "1           Allocebus_trichotis     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "2                 Avahi_laniger     Lemuriformes        Indridae      America   \n",
       "3            Avahi_occidentalis     Lemuriformes        Indridae   Madagascar   \n",
       "4                Avahi_unicolor     Lemuriformes        Indridae      America   \n",
       "5    Cheirogaleus_adipicaudatus     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "6        Cheirogaleus_crossleyi     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "7            Cheirogaleus_major     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "8           Cheirogaleus_medius     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "0                2.700  \n",
       "1                0.100  \n",
       "2                1.030  \n",
       "3                0.814  \n",
       "4                0.830  \n",
       "5                0.200  \n",
       "6                0.400  \n",
       "7                0.450  \n",
       "8                0.217  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing data\n",
    "MyDF = pd.read_csv('../data/testcsv.csv', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "319be088",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Daubentonia_madagascariensis</td>\n",
       "      <td>Chiromyiformes</td>\n",
       "      <td>Daubentoniidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allocebus_trichotis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avahi_laniger</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>1.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avahi_occidentalis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Species       Infraorder          Family Distribution  \\\n",
       "0  Daubentonia_madagascariensis  Chiromyiformes   Daubentoniidae   Madagascar   \n",
       "1           Allocebus_trichotis     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "2                 Avahi_laniger     Lemuriformes        Indridae      America   \n",
       "3            Avahi_occidentalis     Lemuriformes        Indridae   Madagascar   \n",
       "4                Avahi_unicolor     Lemuriformes        Indridae      America   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "0                2.700  \n",
       "1                0.100  \n",
       "2                1.030  \n",
       "3                0.814  \n",
       "4                0.830  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays the top 5 rows. Accepts an optional int parameter - num. of rows to show\n",
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8675267f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cheirogaleus_adipicaudatus</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cheirogaleus_crossleyi</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cheirogaleus_major</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheirogaleus_medius</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Species    Infraorder          Family Distribution  \\\n",
       "4              Avahi_unicolor  Lemuriformes        Indridae      America   \n",
       "5  Cheirogaleus_adipicaudatus  Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "6      Cheirogaleus_crossleyi  Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "7          Cheirogaleus_major  Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "8         Cheirogaleus_medius  Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "4                0.830  \n",
       "5                0.200  \n",
       "6                0.400  \n",
       "7                0.450  \n",
       "8                0.217  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Similar to head, but displays the last rows\n",
    "MyDF.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "081095fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9, 5)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The dimensions of the dataframe as a (rows, cols) tuple\n",
    "MyDF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc5a1796",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of columns. Equal to df.shape[0]\n",
    "len(MyDF) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d020398e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Species', 'Infraorder', 'Family', 'Distribution',\n",
       "       'Body mass male (Kg)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# An array of the column names\n",
    "MyDF.columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5a41164b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Species                 object\n",
       "Infraorder              object\n",
       "Family                  object\n",
       "Distribution            object\n",
       "Body mass male (Kg)    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Columns and their types\n",
    "MyDF.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "21dd62a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Daubentonia_madagascariensis', 'Chiromyiformes ',\n",
       "        'Daubentoniidae', 'Madagascar', 2.7],\n",
       "       ['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae',\n",
       "        'Madagascar', 0.1],\n",
       "       ['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', 1.03],\n",
       "       ['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagascar',\n",
       "        0.814],\n",
       "       ['Avahi_unicolor', 'Lemuriformes', 'Indridae', 'America', 0.83],\n",
       "       ['Cheirogaleus_adipicaudatus', 'Lemuriformes', 'Cheirogaleidae',\n",
       "        'Madagascar', 0.2],\n",
       "       ['Cheirogaleus_crossleyi', 'Lemuriformes', 'Cheirogaleidae',\n",
       "        'Madagascar', 0.4],\n",
       "       ['Cheirogaleus_major', 'Lemuriformes', 'Cheirogaleidae',\n",
       "        'Madagascar', 0.45],\n",
       "       ['Cheirogaleus_medius', 'Lemuriformes', 'Cheirogaleidae',\n",
       "        'Madagascar', 0.217]], dtype=object)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converts the frame to a two-dimensional table\n",
    "MyDF.values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "642d6b19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.749000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.799451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.217000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.830000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Body mass male (Kg)\n",
       "count             9.000000\n",
       "mean              0.749000\n",
       "std               0.799451\n",
       "min               0.100000\n",
       "25%               0.217000\n",
       "50%               0.450000\n",
       "75%               0.830000\n",
       "max               2.700000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays descriptive stats for all columns\n",
    "MyDF.describe()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Profiling code - faster version
Try: run -p profileme2.py or,
     run -s cumtime -p profileme2.py (to order by cumulative time)
"""
# other flags eg -s to sort, -l to limit num lines/filter results by function name, -T saves report to text file
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'


def my_squares(iters):
    """Takes a number, returns the squares of the numbers up to this number in a list."""
    # list comrehension rather than for loop
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """Takes a number, iters, and a string; returns a new string which contains the orginal string repeated iters times, each spearated by a comma and space."""
    out = ''
    for i in range(iters):
        # replaced .join() function with explicit string concatenation
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """Takes a number and string; passes these to my_squares() and my_join().
    When finished, returns 0"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")

**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.04796s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
print("Hello, this is R!")

**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.05558s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""The Lotka-Volterra model; 2 plots of consumer-resource density created in ../results."""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

from scipy import integrate
import numpy as np
import matplotlib.pylab as p


# Lotka-Volterra model
def dCR_dt(pops, t=0):
    """Defines the Lotka-Volterra model. 
    Returns the growth rate of the consumer and resource populations at any given time step"""

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C

    return np.array([dRdt, dCdt])


type(dCR_dt)

# param values
r = 1.
a = 0.1 
z = 1.5
e = 0.75

# time vector - here integrating from time 0 to 15 using 1000 sub-divisions
t = np.linspace(0, 15, 1000)

# initial conditions for the 2 pops
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

# now numerically integrate this systme forward 
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops
# pops contains the result (pop trajectories)

# ?integrate.odeint
# infodict is a dictionary w some additional info:
type(infodict)
infodict.keys()
infodict["message"]


# visualise results

# consumer-resource over time
f1 = p.figure()
p.plot(t, pops[:, 0], 'g-', label='Resource density')  # Plot
p.plot(t, pops[:, 1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

f1.savefig('../results/LV_model.pdf')  # Save figure


# resource vs consumer density
f2 = p.figure()
p.plot(pops[:, 0], pops[:, 1], 'red')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()

f2.savefig("../results/LV_model2.pdf")

**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.77190s

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Quick profiling with timeit"""
__author__ = 'Tash Ramsden (tash.ramsden21@imperial.ac.uk)'
__version__ = '0.0.1'

##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join


# try running these from ipython:
# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)
# %timeit (my_join_join(iters, mystring))
# %timeit (my_join(iters, mystring))


# or also just time the functions like this:
import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))

# BUT:
# timeit reruns and takes ave time
# vs time will give diff answer each time

**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string
my_squares_loops takes 0.244657 s to run.
my_squares_lc takes 0.339256 s to run.

**********************************************************************

Code ran without errors

Time consumed = 8.77403s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!